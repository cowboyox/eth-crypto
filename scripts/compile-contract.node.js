console.log('running compile-contract.node.js..');

const solc = require('solc');
const fs = require('fs');
const path = require('path');
const sha = require('js-sha3').sha3_256;

const contractDir = path.join(__dirname, '../contracts/');
const compiledDir = path.join(__dirname, '../gen/');

const compileContract = function(contractCode, name) {
    const compiled = solc.compile(contractCode, 1);
    const contractCompiled = compiled.contracts[':' + name];
    const ret = {
        interface: JSON.parse(contractCompiled.interface),
        code: contractCompiled.bytecode,
        hash: sha(contractCode)
    };
    return ret;
};


fs.readdir(contractDir, function(err, filenames) {
    if (err) throw err;


    let amount = filenames.length;
    filenames.forEach(function(filename) {
        const name = filename.split('.')[0];
        fs.readFile(contractDir + filename, 'utf-8', function(err, content) {
            if (err) throw err;


            //check if it has to recompile
            let redo = false;
            try {
                const compiled = require(compiledDir + name + '.json');
                console.log('codeHash:' + sha(content));
                console.log('prefHash:' + compiled.hash);
                if (!compiled.hash || sha(content) != compiled.hash)
                    redo = true;
            } catch (e) {
                //                console.dir(e);
                //                console.log('aaaaaaaaaaaaaaaaaaaa');
                redo = true;
            }

            if (redo) {
                console.log('------ recompile ' + name + ' ---------');

                console.log('---remove old files');
                try {
                    fs.unlinkSync(compiledDir + name + '.js');
                } catch (e) {}
                try {
                    fs.unlinkSync(compiledDir + name + '.int.js');
                } catch (e) {}

                console.log('---compile new code');
                const newCompiled = compileContract(content, name);
                const abi = {
                    contractName: 'One2N',
                    abi: newCompiled.interface
                };
                fs.writeFileSync(
                    compiledDir + name + '.abi.json',
                    JSON.stringify(abi, null, 2)
                );


                const infoString = '/* generated by compile-contract.node.js */';
                const saveJson = {
                    '// info': infoString
                };
                Object.keys(newCompiled).forEach(k => saveJson[k] = newCompiled[k]);

                console.log('---write to file');
                fs.writeFileSync(
                    compiledDir + name + '.json',
                    JSON.stringify(saveJson, null, 2)
                );

                const interfaceJson = {
                    '// info': infoString
                };
                Object.keys(saveJson.interface).forEach(k => interfaceJson[k] = saveJson.interface[k]);

                fs.writeFileSync(
                    compiledDir + name + '.interface.json',
                    JSON.stringify(interfaceJson, null, 2)
                );
                console.log('--------------');
            }
            amount--;
            if (amount === 0)
                process.exit(0);
        });
    });
});
